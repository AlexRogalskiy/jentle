package com.wildbeeslabs.jentle.algorithms.utils;

import lombok.experimental.UtilityClass;

import java.util.Objects;
import java.util.function.Function;

import static java.util.Arrays.stream;
import static java.util.stream.Collectors.joining;

@UtilityClass
public class ClassUtils {

    /**
     * Get the fully qualified name of the supplied class.
     *
     * <p>This is a null-safe variant of {@link Class#getName()}.
     *
     * @param clazz the class whose name should be retrieved, potentially
     *              {@code null}
     * @return the fully qualified class name or {@code "null"} if the supplied
     * class reference is {@code null}
     * @see #nullSafeToString(Class...)
     * @see StringUtils#nullSafeToString(Object)
     * @since 1.3
     */
    public static String nullSafeToString(final Class<?> clazz) {
        return Objects.isNull(clazz) ? "null" : clazz.getName();
    }

    /**
     * Generate a comma-separated list of fully qualified class names for the
     * supplied classes.
     *
     * @param classes the classes whose names should be included in the
     *                generated string
     * @return a comma-separated list of fully qualified class names, or an empty
     * string if the supplied class array is {@code null} or empty
     * @see #nullSafeToString(Function, Class...)
     * @see StringUtils#nullSafeToString(Object)
     */
    public static String nullSafeToString(final Class<?>... classes) {
        return nullSafeToString(Class::getName, classes);
    }

    /**
     * Generate a comma-separated list of mapped values for the supplied classes.
     *
     * <p>The values are generated by the supplied {@code mapper}
     * (e.g., {@code Class::getName}, {@code Class::getSimpleName}, etc.), unless
     * a class reference is {@code null} in which case it will be mapped to
     * {@code "null"}.
     *
     * @param mapper  the mapper to use
     * @param classes the classes to map
     * @return a comma-separated list of mapped values, or an empty string if
     * the supplied class array is {@code null} or empty
     * @see #nullSafeToString(Class...)
     * @see StringUtils#nullSafeToString(Object)
     */
    public static String nullSafeToString(final Function<? super Class<?>, ? extends String> mapper, final Class<?>... classes) {
        if (classes == null || classes.length == 0) {
            return "";
        }
        return stream(classes).map(clazz -> Objects.isNull(clazz) ? "null" : mapper.apply(clazz)).collect(joining(", "));
    }
}
